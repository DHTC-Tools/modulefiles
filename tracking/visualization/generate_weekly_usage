#!/usr/bin/env python

import sys
import time
import datetime
try:
    import cPickle as pickle
except:
    import pickle


import redis
import pymongo

def process_usage_history(db, start_date=datetime.date.today()):
    """
    scan the db and compile the top 20 modules used for each site
    for each week from start_date to the current date
    """
    today = datetime.date.today()
    week_start = start_date - datetime.timedelta(days=start_date.isoweekday())
    while week_start < today:
        calculate_weekly_usage(db, week_start)
        week_start += datetime.timedelta(days=7)
        

def calculate_weekly_usage(db, start_date=datetime.date.today()):
    """
    scan the db and compile the module usage by site for the 7 days following
    start_date
    """
    usage_list = {}
    redis_client = redis.Redis(host='db.mwt2.org')
    site_translation = pickle.loads(redis_client.get('osg_site_name_conversions'))
    midnight = datetime.time(0, 0, 0)
    end_date = start_date + datetime.timedelta(days=7)
    end_datetime = time.mktime(datetime.datetime.combine(end_date, midnight).timetuple())
    start_datetime = time.mktime(datetime.datetime.combine(start_date, midnight).timetuple())
    for record in db.usage.find({"date": {"$gte": start_datetime,
                                          "$lt": end_datetime}}):
        site = record['site']
        module = record['module']
        if 'user' in record:
            user = record['user']
        else:
            user = 'UNAVAILABLE'
        if 'project' in record:
            project = record['project']
        else:
            project = 'UNAVAILABLE'
        if site in site_translation:
            site_name = site_translation[site]
        else:
            site_name = site
        if user is None:
            user = 'UNAVAILABLE'
        if project is None:
            project = 'UNAVAILABLE'
        dict_key = frozenset(["site:{0}".format(site),
                              "user:{0}".format(user),
                              "project:{0}".format(project)])
        if dict_key not in usage_list:
            usage_list[dict_key] = {module: 1}
        elif module not in usage_list[dict_key]:
            usage_list[dict_key][module] = 1
        else:
            usage_list[dict_key][module] += 1
    for dict_key in usage_list:
        for module in usage_list[dict_key]:
            record = {"module": module,
                      "count": usage_list[dict_key][module],
                      "date": start_date.isoformat()}
            # populate site, user, project fields from frozenset
            for member in dict_key:
                (field, value) = member.split(":")
                record[field] = value
            db.weekly_count.insert(record)

            
def run_main():
    """
    Main function, fix records by converting ints and floats to appropriate types
    """
    db_client = pymongo.MongoClient(host='db.mwt2.org', port=27017)
    db = db_client.module_usage
    if len(sys.argv) > 1:
        try:
            date_fields = sys.argv[1].split('-')
            start_date = datetime.date(int(date_fields[0]),
                                       int(date_fields[1]),
                                       int(date_fields[2]))
        except ValueError:
            sys.stderr.write("Can't parse {0} into date, ".format(sys.argv[1]) +
                             "must be in YYYY-MM-DD format\n")
            sys.exit(1)
            
    else:
        start_date = datetime.date.today()
    process_usage_history(db, start_date)


if __name__ == '__main__':
    run_main()
